# Add Item to cart and return total cart price.

mutation addItemToCart($item: restaurant_cart_item_insert_input!) {
  insert_restaurant_cart_item_one(object: $item) {
    id
    cost_per_one
    customer_id
    note
    quantity
    restaurant_item_id
  }
}

# Remove Item from Cart
mutation removeItemFromCart($item_id: Int!) {
  delete_restaurant_cart_item_by_pk(id: $item_id) {
    id
  }
}

mutation set_cart_restaurant_id($restaurant_id: Int!, $customer_id: Int!) {
  update_restaurant_cart_by_pk(
    pk_columns: { customer_id: $customer_id }
    _set: { restaurant_id: $restaurant_id }
  ) {
    restaurant_id
  }
}

query getCustomerCart($customer_id: Int!) {
  customer_customer_by_pk(user_id: $customer_id) {
    cart {
      restaurant {
        id
        stripe_info
        accepted_payments
        
        

        firebase_id
        image
        language_id
        description_id
        location_gps
        location_text
        name
        self_delivery
        #schedule_id
        schedule
        description {
          translations {
            language_id
            value
          }
        }
        approved
        open_status
      }
      items {
        id
        restaurant_item {
          id
          item_type
          name {
            translations {
              language_id
              value
            }
          }
          description {
            translations {
              language_id
              value
            }
          }
          options {
            item_options {
              id
              free_choice
              cost_per_extra
              option_type
              position
              maximum_choice
              minimum_choice
              name {
                id
                translations {
                  language_id
                  value
                }
              }
              choices {
                option_choices {
                  available
                  cost
                  id
                  name {
                    id
                    translations {
                      language_id
                      value
                    }
                  }
                }
              }
            }
          }
          position
          category_id
          available
          restaurant_id
          special_period_end
          special_period_start
          archived
          cost
        }
        cost_per_one
        id
        note
        quantity
        selected_options
      }
    }
  }
}

# Create a customer Cart
mutation create_customer_cart($cart: restaurant_cart_insert_input!) {
  insert_restaurant_cart_one(object: $cart) {
    customer_id
    restaurant_id
  }
}

subscription listen_on_customer_cart($customer_id: Int!) {
  customer_customer_by_pk(user_id: $customer_id) {
    cart {
      restaurant_id
      restaurant {
        id
        firebase_id
        stripe_info
        accepted_payments
        image
        language_id
        description_id
        location_gps
        location_text
        name
        self_delivery
        #schedule_id
        schedule
        description {
          translations {
            language_id
            value
          }
        }
        approved
        open_status
      }
      items {
        restaurant_item {
          options {
            item_options {
              id
              free_choice
              cost_per_extra
              option_type
              position
              maximum_choice
              minimum_choice
              name {
                id
                translations {
                  language_id
                  value
                }
              }
              choices {
                option_choices {
                  available
                  cost
                  id
                  name {
                    id
                    translations {
                      language_id
                      value
                    }
                  }
                }
              }
            }
          }
          item_type
          id
          name {
            translations {
              language_id
              value
            }
          }
          description {
            translations {
              language_id
              value
            }
          }
          position
          category_id
          available
          restaurant_id
          special_period_end
          special_period_start
          archived
          cost
        }
        cost_per_one
        id
        note
        quantity
        selected_options
      }
    }
  }
}

# Remove all items from Cart by customerId.
mutation clearCart($customer_id: Int!) {
  delete_restaurant_cart_item(where: { customer_id: { _eq: $customer_id } }) {
    affected_rows
  }
}

mutation updateRestaurantCartItem(
  $itemId: Int!
  $itemData: restaurant_cart_item_set_input
) {
  update_restaurant_cart_item_by_pk(
    pk_columns: { id: $itemId }
    _set: $itemData
  ) {
    id
  }
}
